 Radar design from http://trmm-fc.gsfc.nasa.gov/trmm_gv/software/rsl/RSL_structures.html


#ifdefine USE_TWO_BYTE_PRECISION 
typedef unsigned short Range;
#else
typedef unsigned char Range;
#endif


typedef struct _azimuth_hash {
  Ray *ray;
  struct _azimuth_hash *next,*ray_high,*ray_low;
} Azimuth_hash;

typedef struct {
  int   month;  /* Begin time for this Cappi; month (1-12). */
  int   day;    /* Begin time for this Cappi; day (1-31). */
  int   year;   /* Begin time for this Cappi; year (eg. 1993). */
  int   hour;   /* Begin date for this Cappi; hour (0-23). */
  int   minute; /* Begin date for this Cappi; minute (0-59).*/
  float sec;    /* Begin date for this Cappi; second + fraction of  second. */ 
  float height;      /* Height for this Cappi. */
  float lat;
  float lon;         /* Lat/lon of lower left corner of Carpi. */
  int field_type;
  char radar_type[50]; /* Value of Constant radar->h.radar_type */ 
  int interp_method; /* ??? string describing interpolation method. */
  Er_loc *loc;       /* elevation and range coordinate array */
  Sweep *sweep;      /* Pointers to rays of data */
} Cappi;

typedef struct {
  int   month;            /* (1-12). */
  int   day;              /* (1-31).   */
  int   year;             /* (eg. 1993). */
  int   hour;             /* (0-23). */
  int   minute;           /* (0-59).*/
  float sec;              /* second + fraction of second. */
  float dx, dy;           /* Size of cell in km. */
  int   nx, ny;           /* Number of cells. */
  int   radar_x, radar_y; /* Location of center of radar. */
  float height;           /* Height of this Carpi. */
  float lat, lon;         /* Lat/lon of lower left corner of Carpi. */
  char  radar_type[50];   /* Radar types. */
  int   field_type;       /* Same as for Radar. */
  int   interp_method;    /* ??? string describing interpolation method. */
  float (*f)(Carpi_value x);    /* Data conversion function. f(x). */
  Carpi_value (*invf)(float x); /* Data conversion function. invf(x). */
  Carpi_value **data;     /* data[ny][nx] */
} Carpi; 

typedef struct    {
   float lat, lon;
   float dx, dy, dz;
   int nx, ny, nz;
   char *data_type;
   Carpi **carpi;
   } Cube; 

typedef struct { 
  float elev; /* elevation angle */
  float srange; /* slant range !!! */
} Er_loc;

typedef struct {
  Azimuth_hash **indexes;
  int nindexes;
} Hash_table;

typedef struct {
  int nbins;
  int low;
  int hi;
  int ucount;
  int ccount;
  int *data;
} Histogram; 

typedef struct {
  Ray_header h;
  Range *range; /* range[0..nbins-1] */
                /* For wsr88d file:
                 * 0..460 for reflectivity, 0..920 for velocity and 
                 * spectrum width. You must allocate this space.
                 */
} Ray; 

  

typedef struct {
  int   month; /* Time for this ray; month (1-12). */
  int   day;   /* Time for this ray; day (1-31).   */
  int   year;  /* Time for this ray; year (eg. 1993). */
  int   hour;  /* Date for this ray; hour (0-23). */
  int   minute;/* Date for this ray; minute (0-59).*/
  float sec;   /* Date for this ray; second + fraction of second. */
  float unam_rng;  /* Unambiguous range. (KM). */
  float azimuth;   /* Azimuth angle. (degrees). Must be positive
                                        * 0=North, 90=east, -90/270=west.
                    * This angle is the mean azimuth for the whole ray.
                                        * Eg. for NSIG the beginning and end azimuths are
                                        *     averaged.
                                        */
  int   ray_num;   /* Ray no. within elevation scan. */
  float elev;       /* Elevation angle. (degrees). */
  int   elev_num;   /* Elevation no. within volume scan. */
  
  int   range_bin1; /* Range to first gate.(meters) */
  int   gate_size;  /* Data gate size (meters)*/
  
  float  vel_res;    /* Doppler velocity resolution */
  float sweep_rate;   /* Sweep rate. Full sweeps/min. */
  
  int prf;          /* Pulse repitition frequency, in Hz. */
  float azim_rate;
  float fix_angle;
  float pitch;      /* Pitch angle. */
  float roll;       /* Roll  angle. */
  float heading;    /* Heading. */
  float pitch_rate; /* (angle/sec) */
  float roll_rate;  /* (angle/sec) */
  float heading_rate; /* (angle/sec) */
  float lat;          /* Latitude (degrees) */
  float lon;          /* Longitude (degrees) */
  int   alt;          /* Altitude (m) */
  float rvc;          /* Radial velocity correction (m/sec) */
  float vel_east;     /* Platform velocity to the east  (m/sec) */
  float vel_north;    /* Platform velocity to the north (m/sec) */
  float vel_up;       /* Platform velocity toward up    (m/sec) */
  float pulse_count;
  float pulse_width; /* Pulse width (micro-sec). */
  float beam_width;  /* Beamwidth in degrees. */
  float frequency;   /* Bandwidth MHz. */
  float wavelength;  /* Wavelength. Meters. */
  float nyq_vel;    /* Nyquist velocity. m/s */
  float (*f)(Range x);       /* Data conversion function. f(x). */
  Range (*invf)(float x);    /* Data conversion function. invf(x). */
  int   nbins;               /* Number of array elements for 'Range'. */
} Ray_header;

typedef struct {
  Sweep_header h;
  Ray **ray; /* ray[0..nrays-1]. */
} Sweep; 

typedef struct {
  int sweep_num;      /* Integer sweep number. */
  float elev;         /* Elevation angle (mean) for the sweep. */
  float beam_width;   /* This is in the ray header too. */
  float vert_half_bw; /* Vertical beam width divided by 2 */
  float horz_half_bw; /* Horizontal beam width divided by 2 */
  int nrays;
  float (*f)(Range x); /* Data conversion function. f(x). */
  Range (*invf)(float x); /* Data conversion function. invf(x). */ 
} Sweep_header; 

typedef struct {
  Volume_header h; /* Specific info for each elev. */
                   /* Includes resolution: km/bin. */
  Sweep **sweep;   /* sweep[0..nsweeps-1]. */
} Volume; 

typedef struct {
  char *type_str;  /* One of:'Reflectivity', 'Velocity' or 'Spectrum width' */
  int nsweeps;
        float calibr_const;        /* Calibration constant. */
  float (*f)(Range x);       /* Data conversion function. f(x). */
  Range (*invf)(float x);    /* Data conversion function. invf(x). */
} Volume_header;

typedef struct { 
  int month, day, year; 
  int hour, minute; 
  float sec; /* Second plus fractional part. */
  char radar_type[50]; /* Type of radar. Use for QC-ing the data.
                        * Supported types are:
                        * "wsr88d", "lassen", "uf",
                        * "nsig", "nsig2", "mcgill",
                        * "kwajalein", "rsl", "toga".
                        * Set by appropriate ingest routine.
                        */ 
  int nvolumes;
  int number;        /* arbitrary number of this radar site */
  char name[8];      /* Nexrad site name */
  char radar_name[8]; /* Radar name. */
  char project[24];   /* Project assocated with data. */
  char city[15];     /* nearest city to radaar site */
  char state[2];     /* state of radar site */
  int latd;   /* degrees of latitude of site */
  int latm;   /* minutes of latitude of site */
  int lats;   /* seconds of latitude of site */
  int lond;   /* degrees of longitude of site */
  int lonm;   /* minutes of longitude of site */
  int lons;   /* seconds of longitude of site */
  int height; /* height of site in meters above sea level*/
  int spulse; /* length of short pulse (ns)*/
  int lpulse; /* length of long pulse (ns) */
} Radar_header;

typedef struct {
  Radar_header h;
  Volume **v;   /* Array 0..nvolumes-1 of pointers to Volumes.
                      * 0 = DZ_INDEX = reflectivity.
                      * 1 = VR_INDEX = velocity.
                      * 2 = SW_INDEX = spectrum_width.
                      * 3 = CZ_INDEX = corrected reflectivity.
                      * 4 = ZT_INDEX = total reflectivity.
                      * 5 = DR_INDEX = differential refl.
                      * 6 = LR_INDEX = another differential refl.
                      * 7 = ZD_INDEX = another refl form.
                      * 8 = DM_INDEX = recieved power.
                      * 9 = RH_INDEX = Rho coefficient.
                      *10 = PH_INDEX = Phi (MCTEX parameter).
                      *11 = XZ_INDEX = X-band reflectivity.
                      *12 = CR_INDEX = Corrected DR.
                      *13 = MZ_INDEX = DZ mask for 1C-51 HDF.
                      *14 = MR_INDEX = DR mask for 1C-51 HDF.
                      *15 = ZE_INDEX = Edited reflectivity.
                      *16 = VE_INDEX = Edited velocity.
                      *17 = KD_INDEX = KDP (unknown)  for MCTEX data.
                      *18 = TI_INDEX = TIME (unknown)  for MCTEX data.
                */
} Radar;

/*
 * DZ     Reflectivity (dBZ), may contain some   DZ_INDEX
 *        signal-processor level QC and/or      
 *        filters. This field would contain 
 *        Darwin's CZ, or WSR88D's standard 
 *        reflectivity. In other words, unless
 *        the field is described otherwise, it
 *        should always go here. In essence, this
 *        is the "cleanest" reflectivity field
 *        for a radar.
 *
 * VR     Radial Velocity (m/s)                  VR_INDEX
 *
 * SW     Spectral Width (m2/s2)                 SW_INDEX
 *
 * CZ     QC Reflectivity (dBZ), contains
 *        post-processed QC'd data               CZ_INDEX
 *
 * ZT     Total Reflectivity (dBZ)               ZT_INDEX
 *        May be uncommon, but important
 *        This is UZ in UF files.
 *
 * DR     Differential reflectivity              DR_INDEX
 *        DR and LR are for dual-polarization
 *        radars only. Unitless or in dB.
 *
 * LR     Another form of differential ref       LR_INDEX
 *        called LDR, not sure of units
 *
 * ZD     ZDR: Reflectivity Depolarization Ratio ZD_INDEX
 *        ZDR = 10log(ZH/ZV)  (dB)
 *
 * DM     Received power measured by the radar.  DM_INDEX
 *        Units are dBm.
 *
 * RH     Rho : Correlation coefficient (MCTEX)  RH_INDEX
 *
 * PH     Phi (MCTEX parameter)                  PH_INDEX
 *
 * XZ     X-band reflectivity                    XZ_INDEX
 *
 * CD     Corrected ZD reflectivity (differential) CD_INDEX
 *        contains QC'ed data
 *
 * MZ     DZ mask volume for HDF 1C-51 product.  MZ_INDEX
 *
 * MD     ZD mask volume for HDF 1C-51 product.  MD_INDEX
 *
 * ZE     Edited Reflectivity.                   ZE_INDEX
 *
 * VE     Edited Velocity.                       VE_INDEX
 *
 * KD     KDP (unknown)  for MCTEX data.         KD_INDEX
 *
 * TI     TIME (unknown)  for MCTEX data.        TI_INDEX
 */

